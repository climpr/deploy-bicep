name: Deploy Bicep deployment
description: Parses a Bicep deployment based on the .bicepparam file and deploys to Azure

inputs:
  parameter-file-path:
    description: The path to the .bicepparam file.
    required: true
  what-if:
    description: Setting this to true will run the deployment commands in what-if mode.
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Install PS Modules
      uses: climpr/install-psmodules@v1
      with:
        modules: |
          Bicep:2.5.0

    - name: Resolve deployment configuration
      id: resolve-deploymentconfig
      shell: pwsh
      env:
        parameterFilePath: ${{ inputs.parameter-file-path }}
        actionPath: ${{ github.action_path }}
        eventName: ${{ github.event_name }}
        debug: ${{ runner.debug }}
      run: |
        #* Resolve-DeploymentConfig.ps1

        #* Set debug preference from runner configuration
        $DebugPreference = [bool]$env:debug ? "Continue" : "SilentlyContinue"

        #* Parse deployment
        $deploymentConfig = & "$($env:actionPath)/src/Resolve-DeploymentConfig.ps1" `
          -ParameterFilePath $env:parameterFilePath `
          -DefaultDeploymentConfigPath "$($env:actionPath)/default.deploymentconfig.json" `
          -GitHubEventName $env:eventName

        #* Write outputs
        Write-Output "deploy=$($deploymentConfig.Deploy)" >> $env:GITHUB_OUTPUT
        Write-Output "name=$($deploymentConfig.DeploymentName)" >> $env:GITHUB_OUTPUT
        Write-Output "parameter-file=$($deploymentConfig.ParameterFile)" >> $env:GITHUB_OUTPUT
        Write-Output "scope=$($deploymentConfig.DeploymentScope)" >> $env:GITHUB_OUTPUT
        Write-Output "location=$($deploymentConfig.Location)" >> $env:GITHUB_OUTPUT
        Write-Output "resource-group=$($deploymentConfig.ResourceGroupName)" >> $env:GITHUB_OUTPUT
        Write-Output "management-group-id=$($deploymentConfig.ManagementGroupId)" >> $env:GITHUB_OUTPUT
        Write-Output "azure-cli-version=$($deploymentConfig.AzureCliVersion)" >> $env:GITHUB_OUTPUT

    - name: Bicep deployment
      id: bicep-deployment
      uses: azure/CLI@v2
      if: steps.resolve-deploymentconfig.outputs.deploy == 'true'
      env:
        SCOPE: ${{ steps.resolve-deploymentconfig.outputs.scope }}
        PARAMETER_FILE: ${{ steps.resolve-deploymentconfig.outputs.parameter-file }}
        DEPLOYMENT_NAME: ${{ steps.resolve-deploymentconfig.outputs.name }}
        RESOURCE_GROUP: ${{ steps.resolve-deploymentconfig.outputs.resource-group }}
        MANAGEMENT_GROUP_ID: ${{ steps.resolve-deploymentconfig.outputs.management-group-id }}
        LOCATION: ${{ steps.resolve-deploymentconfig.outputs.location }}
        WHAT_IF: ${{ inputs.what-if }}
        DEBUG: ${{ runner.debug == '1' }}
      with:
        azcliversion: ${{ steps.resolve-deploymentconfig.outputs.azure-cli-version }}
        inlineScript: |
          #* Enable strict mode
          set -euo pipefail

          #* Multiline annotation replacement function
          format_multiline_annotation() {
            #* Input: A multiline string
            #* Output: The string formatted for GitHub annotations

            local input="$1"

            #* Replace newlines with %0A to support multiline annotations in GitHub workflows
            local formatted_string=$(echo "$input" | sed ':a;N;$!ba;s/\n/%0A/g')

            #* Output the formatted string
            echo "$formatted_string"
          }

          #* Cleanup function
          touch stderr.log
          print_stderr() {
            echo "start"
            cat stderr.log
            echo "stop"

            current_entry=""
            while IFS= read -r line || [[ -n $line ]]; do
              if [[ $line =~ ^[^:]+: ]]; then
                #* New entry starts; process the previous entry
                if [[ -n $current_entry ]]; then
                  #* Extract prefix and message
                  local prefix="${current_entry%%:*}"  #* Text before the first colon
                  local message="${current_entry#*: }" #* Text after the first colon and space

                  #* Choose color based on prefix
                  local color=""
                  case "$prefix" in
                  WARNING) color="\e[33m" ;; #* Yellow
                  ERROR) color="\e[31m" ;;   #* Red
                  *) color="\e[37m" ;;       #* Default (white/gray)
                  esac

                  #* Check if message is JSON
                  if echo "$message" | jq -e . >/dev/null 2>&1; then

                    #* Pretty-print the JSON and apply red color to each line, suppressing extra lines
                    formatted_json=$(echo "$message" | jq . 2>/dev/null | while IFS= read -r json_line || [[ -n $json_line ]]; do
                      echo -e "${color}${prefix}:\e[0m"
                      echo -e "${color}${json_line}\e[0m"
                    done)

                    #* Print GitHub annotation
                    if [[ $prefix == "ERROR" ]]; then
                      annotation_json=$(format_multiline_annotation "$formatted_json")
                      echo "::error::An error occurred during deployment. See error details in below%0A${annotation_json}"
                    fi

                  else
                    #* Not JSON: Print the raw message with color
                    echo -e "${color}${message}\e[0m"
                  fi
                fi
                #* Start a new log entry
                current_entry="$line"
              else
                #* Continuation of the current entry
                current_entry+=" $line"
              fi
            done <stderr.log
          }

          #* Set trap to call the cleanup function on ERR
          trap print_stderr ERR

          #* Create deployment command
          cmd=()
          case $SCOPE in
          resourceGroup)
            cmd+=("az deployment group create")
            cmd+=("--resource-group $RESOURCE_GROUP")
            ;;
          subscription)
            cmd+=("az deployment sub create")
            cmd+=("--location $LOCATION")
            ;;
          managementGroup)
            cmd+=("az deployment mg create")
            cmd+=("--location $LOCATION")
            cmd+=("--management-group-id $MANAGEMENT_GROUP_ID")
            ;;
          tenant)
            cmd+=("az deployment tenant create")
            cmd+=("--location $LOCATION")
            ;;
          *)
            echo "::error::Unknown deployment scope." >&2
            exit 1
            ;;
          esac

          #* Add common parameters
          cmd+=("--parameters $PARAMETER_FILE")
          cmd+=("--name $DEPLOYMENT_NAME")
          cmd+=("--verbose")
          cmd+=($([[ $WHAT_IF == 'true' ]] && echo "--what-if" || echo ""))
          cmd+=($([[ $DEBUG == 'true' ]] && echo "--debug" || echo ""))

          #* Print command
          echo "Running command:"
          printf "%s\n" "$(
            printf "%s \\\\\n" "${cmd[@]}" |              #* Print each array element followed by " \\"
              awk 'NR==1 {print; next} {print "  " $0}' | #* Add two spaces before all lines except the first
              sed '$ s/ \\$//'                            #* Remove the trailing slash from the last line
          )"

          #* Run deployment command
          deployment_output=$(${cmd[@]} 2> >(tee stderr.log >&2) | tee stdout.log)

          #* Write the result to console
          echo "$deployment_output"

          #* Write success annotation
          if echo "$deployment_output" | jq -e . >/dev/null 2>&1; then
            formatted_message=$(echo "$deployment_output" | jq . 2>/dev/null)
          else
            formatted_message=$deployment_output
          fi
          annotation_message=$(format_multiline_annotation "$formatted_message")

          if [[ $WHAT_IF == 'true' ]]; then
            echo "::notice::Bicep what-if results:%0A${annotation_message}"
          else
            echo "::notice::Bicep template successfully deployed. Result:%0A${annotation_message}"
          fi

          #* Format markdown code block and output to deployment.md
          sed \
            -e '1s/^/```diff\n/' \
            -e '$a```' \
            -e 's/~/!/g' \
            -e 's/^[ \t]*//' \
            stdout.log >deployment.md

          #* Write as github output
          echo "deployment-output=$(echo $deployment_output)" >>"$GITHUB_OUTPUT"

    - name: Add info to the deployment file
      id: deployment-info
      if: inputs.what-if == 'true'
      shell: bash
      env:
        parameterFile: ${{ steps.resolve-deploymentconfig.outputs.parameter-file }}
        scope: ${{ steps.resolve-deploymentconfig.outputs.scope }}
      run: |
        deployment_name=$(echo $parameterFile | awk -F '/' '{print $(NF-1)}')
        echo "**Deployment Name: $deployment_name**" > commitMessageAndId.md
        echo "**Deployment Environment: $(basename $parameterFile | awk -F '.' '{print $(NF-1)}')**" >> commitMessageAndId.md
        echo "**Deployment Scope:** $scope" >> commitMessageAndId.md
        echo "**Commit ID:** $(git rev-parse HEAD)" >> commitMessageAndId.md
        echo "**Commit Message:** $(git log -1 --pretty=%B)" >> commitMessageAndId.md
        cat deployment.md >> commitMessageAndId.md
        mv commitMessageAndId.md deployment.md

    - name: PR comment for what-if deployment
      id: deployment-comment
      if: inputs.what-if == 'true'
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ steps.resolve-deploymentconfig.outputs.parameter-file }}
        message-path: deployment.md

    - name: Clean created files
      shell: bash
      run: |
        rm -f deployment.md
        rm -f commitMessageAndId.md
        rm -f stdout.log
        rm -f stderr.log

outputs:
  deployment-output:
    description: JSON formatted output from the deployment command.
    value: ${{ steps.bicep-deployment.outputs.deployment-output }}
