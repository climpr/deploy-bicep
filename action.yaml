name: Deploy Bicep deployment
description: Parses a Bicep deployment based on the .bicepparam file and deploys to Azure

inputs:
  deployment-file-path:
    description: The path to the .bicep or .bicepparam file.
    required: true

  #* [Deprecated] Kept for backward compatibility
  parameter-file-path:
    description: "[Deprecated] The path to the .bicepparam file. (Use deployment-file-path instead)"
    required: false

  what-if:
    description: Setting this to true will run the deployment commands in what-if mode.
    required: false
    default: "false"

  validate-bicep-snapshot:
    description: "[Experimental] Setting this to true will run bicep snapshot in validate mode. This expects an existing snapshot file."
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Install PS Modules
      uses: climpr/install-psmodules@v1
      with:
        modules: Bicep

    - name: Resolve parameter
      id: get-input
      shell: pwsh
      env:
        deploymentFilePath: ${{ inputs.deployment-file-path }}
        parameterFilePath: ${{ inputs.parameter-file-path }}
      run: |
        $deploymentFilePath = ![string]::IsNullOrWhiteSpace($env:deploymentFilePath) `
          ? $env:deploymentFilePath `
          : $env:parameterFilePath
        Write-Output "deployment-file-path=$deploymentFilePath" >> $env:GITHUB_OUTPUT

    - name: Resolve deployment configuration
      id: resolve-deploymentconfig
      shell: pwsh
      env:
        deploymentFilePath: ${{ steps.get-input.outputs.deployment-file-path }}
        whatIf: ${{ inputs.what-if == 'true' }}
        eventName: ${{ github.event_name }}
        actionPath: ${{ github.action_path }}
        debug: ${{ runner.debug }}
      run: |
        #* Resolve-DeploymentConfig

        #* Set debug preference from runner configuration
        $DebugPreference = [bool]$env:debug ? "Continue" : "SilentlyContinue"

        #* Import module
        Import-Module "$($env:actionPath)/src/DeployBicepHelpers.psm1" -Force

        #* Parse deployment
        $deploymentConfig = Resolve-DeploymentConfig `
          -DeploymentFilePath $env:deploymentFilePath `
          -DefaultDeploymentConfigPath "$($env:actionPath)/default.deploymentconfig.json" `
          -GitHubEventName $env:eventName `
          -DeploymentWhatIf ($env:whatIf -eq $true)

        #* Write outputs
        $outputs = @{
          "deployment-base-name" = "DeploymentBaseName"
          "deployment-id"        = "DeploymentId"
          "deploy"               = "Deploy"
          "type"                 = "Type"
          "name"                 = "Name"
          "environment"          = "Environment"
          "scope"                = "Scope"
          "azure-cli-version"    = "AzureCliVersion"
          "azure-cli-command"    = "AzureCliCommand"
          "bicep-version"        = "BicepVersion"
        }

        foreach ($output in $outputs.Keys) {
          Write-Output "$($output)=$($deploymentConfig.($outputs[$output]))" >> $env:GITHUB_OUTPUT
        }

    - name: Bicep deployment
      id: bicep-deployment
      uses: azure/CLI@v2
      if: steps.resolve-deploymentconfig.outputs.deploy == 'true'
      env:
        AZURE_CLI_COMMAND: ${{ steps.resolve-deploymentconfig.outputs.azure-cli-command }}
        BICEP_VERSION: ${{ steps.resolve-deploymentconfig.outputs.bicep-version }}
        WHAT_IF: ${{ inputs.what-if }}
        DEBUG: ${{ runner.debug == '1' }}
      with:
        azcliversion: ${{ steps.resolve-deploymentconfig.outputs.azure-cli-version }}
        inlineScript: |
          #* Enable strict mode
          set -euo pipefail

          #* Multiline annotation replacement function
          format_multiline_annotation() {
            #* Input: A multiline string
            #* Output: The string formatted for GitHub annotations

            local input="$1"

            #* Replace newlines with %0A to support multiline annotations in GitHub workflows
            local formatted_string=$(echo "$input" | sed ':a;N;$!ba;s/\n/%0A/g')

            #* Output the formatted string
            echo "$formatted_string"
          }

          #* Cleanup function
          touch stderr.log
          print_stderr() {
            echo "start"
            cat stderr.log
            echo "stop"

            current_entry=""
            while IFS= read -r line || [[ -n $line ]]; do
              if [[ $line =~ ^[^:]+: ]]; then
                #* New entry starts; process the previous entry
                if [[ -n $current_entry ]]; then
                  #* Extract prefix and message
                  local prefix="${current_entry%%:*}"  #* Text before the first colon
                  local message="${current_entry#*: }" #* Text after the first colon and space

                  #* Choose color based on prefix
                  local color=""
                  case "$prefix" in
                    WARNING) color="\e[33m" ;; #* Yellow
                    ERROR) color="\e[31m" ;;   #* Red
                    *) color="\e[37m" ;;       #* Default (white/gray)
                  esac

                  #* Check if message is JSON
                  if echo "$message" | jq -e . >/dev/null 2>&1; then
                    #* Pretty-print the JSON and apply red color to each line, suppressing extra lines
                    formatted_json=$(echo "$message" | jq . 2>/dev/null | while IFS= read -r json_line || [[ -n $json_line ]]; do
                      echo -e "${color}${json_line}\e[0m"
                    done)

                    #* Print GitHub annotation
                    if [[ $prefix == "ERROR" ]]; then
                      annotation_json=$(format_multiline_annotation "$formatted_json")
                      echo "::error::An error occurred during deployment. See error details in below%0A${annotation_json}"
                    fi

                  else
                    #* Not JSON: Print the raw message with color
                    echo -e "${color}${prefix}: ${message}\e[0m"
                  fi
                fi
                #* Start a new log entry
                current_entry="$line"
              else
                #* Continuation of the current entry
                current_entry+=" $line"
              fi
            done <stderr.log
          }

          #* Set trap to call the cleanup function on ERR
          trap print_stderr ERR

          #* Add --verbose
          if [[ "$AZURE_CLI_COMMAND" != *"--verbose"* ]]; then
            AZURE_CLI_COMMAND="$AZURE_CLI_COMMAND --verbose"
          fi

          #* Add --debug
          if [[ "$DEBUG" == 'true' && "$AZURE_CLI_COMMAND" != *"--debug"* ]]; then
            AZURE_CLI_COMMAND="$AZURE_CLI_COMMAND --debug"
          fi

          #* Install Az CLI bicep extension
          if [ "${BICEP_VERSION,,}" = "latest" ]; then
            az bicep install
          else
            az bicep install --version "$BICEP_VERSION"
          fi

          #* Print versions
          echo "Azure CLI version:"
          az version
          az bicep version

          #* Print command
          # Convert to multiline with 2-space indentation and 1 space before backslash
          formatted_cmd=$(echo "$AZURE_CLI_COMMAND" | sed 's/--/\n  --/g')

          # Append backslashes for line continuation except the last one
          formatted_cmd=$(echo "$formatted_cmd" | sed 's/$/\\/' | sed '$ s/\\$//')

          # Print the result
          echo "Running command:"
          echo "$formatted_cmd"

          #* Run deployment command
          deployment_output=$($AZURE_CLI_COMMAND 2> >(tee stderr.log >&2) | tee stdout.log)

          #* Write the result to console
          echo "$deployment_output"

          #* Write success annotation
          if echo "$deployment_output" | jq -e . >/dev/null 2>&1; then
            formatted_message=$(echo "$deployment_output" | jq . 2>/dev/null)
          else
            formatted_message=$deployment_output
          fi
          annotation_message=$(format_multiline_annotation "$formatted_message")

          if [[ $WHAT_IF == 'true' ]]; then
            echo "::notice::Bicep what-if results:%0A${annotation_message}"
          else
            echo "::notice::Bicep template successfully deployed. Result:%0A${annotation_message}"
          fi

          #* Format markdown code block and output to deployment.md
          sed \
            -e '1s/^/```diff\n/' \
            -e '$a```' \
            -e 's/~/!/g' \
            -e 's/^[ \t]*//' \
            stdout.log >deployment.md

          #* Write as github output
          echo "deployment-output=$(echo $deployment_output)" >>"$GITHUB_OUTPUT"

    - name: Add info to the deployment file
      id: deployment-info
      if: inputs.what-if == 'true'
      shell: bash
      env:
        NAME: ${{ steps.resolve-deploymentconfig.outputs.deployment-base-name }}
        ENVIRONMENT: ${{ steps.resolve-deploymentconfig.outputs.environment }}
        SCOPE: ${{ steps.resolve-deploymentconfig.outputs.scope }}
      run: |
        echo "**Deployment Name: $NAME**" > commitMessageAndId.md
        echo "**Deployment Environment: $ENVIRONMENT**" >> commitMessageAndId.md
        echo "**Deployment Scope:** $SCOPE" >> commitMessageAndId.md
        echo "**Commit ID:** $(git rev-parse HEAD)" >> commitMessageAndId.md
        echo "**Commit Message:** $(git log -1 --pretty=%B)" >> commitMessageAndId.md
        cat deployment.md >> commitMessageAndId.md
        mv commitMessageAndId.md deployment.md

    - name: PR comment for what-if deployment
      id: deployment-comment
      if: steps.resolve-deploymentconfig.outputs.type == 'deployment' && inputs.what-if == 'true'
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ steps.resolve-deploymentconfig.outputs.deployment-id }}
        message-path: deployment.md

    - name: Clean created files
      shell: bash
      run: |
        rm -f deployment.md
        rm -f commitMessageAndId.md
        rm -f stdout.log
        rm -f stderr.log

    - name: "[Experimental] Bicep snapshot validate"
      id: bicep-snapshot-validate
      if: inputs.validate-bicep-snapshot == 'true' && endsWith(inputs.deployment-file-path, '.bicepparam')
      shell: bash
      run: |
        bicepparam=${{ inputs.deployment-file-path }}
        snapshot=${bicepparam%.bicepparam}.snapshot.json # remove .bicepparam and add suffix .snapshot.json
        if [ ! -f ${snapshot} ]; then; echo "No existing snapshot file to validate against can be found! Aborting." && exit 0; fi
        bicep snapshot ${{ inputs.deployment-file-path }} --mode validate ## --subscription-id xyz --resource-group abc --location swedencentral

outputs:
  deployment-output:
    description: JSON formatted output from the deployment command.
    value: ${{ steps.bicep-deployment.outputs.deployment-output }}
