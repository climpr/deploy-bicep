name: Deploy Bicep deployment
description: Parses a Bicep deployment based on the .bicepparam file and deploys to Azure

inputs:
  parameter-file-path:
    description: The path to the .bicepparam file.
    required: true
  what-if:
    description: Setting this to true will run the deployment commands in what-if mode.
    required: false
    default: "false"

runs:
  using: composite
  steps:
    - name: Install PS Modules
      uses: climpr/install-psmodules@v1
      with:
        modules: |
          Bicep:2.5.0

    - name: Resolve deployment configuration
      id: resolve-deploymentconfig
      shell: pwsh
      env:
        parameterFilePath: ${{ inputs.parameter-file-path }}
        actionPath: ${{ github.action_path }}
        eventName: ${{ github.event_name }}
        debug: ${{ runner.debug }}
      run: |
        #* Resolve-DeploymentConfig.ps1

        #* Set debug preference from runner configuration
        $DebugPreference = [bool]$env:debug ? "Continue" : "SilentlyContinue"

        #* Parse deployment
        $deploymentConfig = & "$($env:actionPath)/src/Resolve-DeploymentConfig.ps1" `
          -ParameterFilePath $env:parameterFilePath `
          -DefaultDeploymentConfigPath "$($env:actionPath)/default.deploymentconfig.json" `
          -GitHubEventName $env:eventName

        #* Write outputs
        Write-Output "deploy=$($deploymentConfig.Deploy)" >> $env:GITHUB_OUTPUT
        Write-Output "name=$($deploymentConfig.DeploymentName)" >> $env:GITHUB_OUTPUT
        Write-Output "parameter-file=$($deploymentConfig.ParameterFile)" >> $env:GITHUB_OUTPUT
        Write-Output "scope=$($deploymentConfig.DeploymentScope)" >> $env:GITHUB_OUTPUT
        Write-Output "location=$($deploymentConfig.Location)" >> $env:GITHUB_OUTPUT
        Write-Output "resource-group=$($deploymentConfig.ResourceGroupName)" >> $env:GITHUB_OUTPUT
        Write-Output "management-group-id=$($deploymentConfig.ManagementGroupId)" >> $env:GITHUB_OUTPUT
        Write-Output "azure-cli-version=$($deploymentConfig.AzureCliVersion)" >> $env:GITHUB_OUTPUT

    - name: Bicep deployment
      id: bicep-deployment
      uses: azure/CLI@v2
      if: steps.resolve-deploymentconfig.outputs.deploy == 'true'
      with:
        azcliversion: ${{ steps.resolve-deploymentconfig.outputs.azure-cli-version }}
        inlineScript: |
          #* Enable strict mode
          set -euo pipefail

          #* Cleanup function
          cleanup() {
            echo "::error::An error occurred during deployment. See error details in below"
            
            #* Read the file line by line
            while IFS= read -r line; do
                if [[ $line == WARNING:* ]]; then
                    #* Extract the WARNING message and print it in yellow
                    echo -e "\e[33m${line#WARNING: }\e[0m"
                elif [[ $line == INFO:* ]]; then
                    #* Print the INFO message in the default color
                    echo "${line#INFO: }"
                elif [[ $line == ERROR:* ]]; then
                    #* Extract the JSON from the ERROR message
                    json=${line#ERROR: }
                    #* Pretty-print the JSON and apply red color to each line, suppressing extra lines
                    echo "$json" | jq . 2>/dev/null | while IFS= read -r json_line || [[ -n $json_line ]]; do
                        echo -e "\e[31m${json_line}\e[0m"
                    done
                fi
            done < stderr.log
          }

          #* Set trap to call the cleanup function on ERR
          trap cleanup ERR

          deploymentOutput=$({
            #* Resource Group scope
            if [ "${{ steps.resolve-deploymentconfig.outputs.scope }}" = "resourceGroup" ]; then
                az deployment group create \
                  --parameters '${{ steps.resolve-deploymentconfig.outputs.parameter-file }}' \
                  --name '${{ steps.resolve-deploymentconfig.outputs.name }}' \
                  --resource-group '${{ steps.resolve-deploymentconfig.outputs.resource-group }}' \
                  --verbose \
                  ${{ (inputs.what-if == 'true') && '--what-if' || '' }} \
                  ${{ (runner.debug == '1') && '--debug' || '' }}

            #* Subscription scope
            elif [ "${{ steps.resolve-deploymentconfig.outputs.scope }}" = "subscription" ]; then
                az deployment sub create \
                  --parameters '${{ steps.resolve-deploymentconfig.outputs.parameter-file }}' \
                  --name '${{ steps.resolve-deploymentconfig.outputs.name }}' \
                  --location '${{ steps.resolve-deploymentconfig.outputs.location }}' \
                  --verbose \
                  ${{ (inputs.what-if == 'true') && '--what-if' || '' }} \
                  ${{ (runner.debug == '1') && '--debug' || '' }}

            #* Management Group scope
            elif [ "${{ steps.resolve-deploymentconfig.outputs.scope }}" = "managementGroup" ]; then
              az deployment mg create \
                --parameters '${{ steps.resolve-deploymentconfig.outputs.parameter-file }}' \
                --name '${{ steps.resolve-deploymentconfig.outputs.name }}' \
                --management-group-id '${{ steps.resolve-deploymentconfig.outputs.management-group-id }}' \
                --location '${{ steps.resolve-deploymentconfig.outputs.location }}' \
                --verbose \
                ${{ (inputs.what-if == 'true') && '--what-if' || '' }} \
                ${{ (runner.debug == '1') && '--debug' || '' }}

            #* Tenant scope
            elif [ "${{ steps.resolve-deploymentconfig.outputs.scope }}" = "tenant" ]; then
              az deployment tenant create \
                --parameters '${{ steps.resolve-deploymentconfig.outputs.parameter-file }}' \
                --name '${{ steps.resolve-deploymentconfig.outputs.name }}' \
                --location '${{ steps.resolve-deploymentconfig.outputs.location }}' \
                --verbose \
                ${{ (inputs.what-if == 'true') && '--what-if' || '' }} \
                ${{ (runner.debug == '1') && '--debug' || '' }}
            fi
          } 2> >(tee stderr.log >&2) | tee stdout.log)
          
          #* Write the result to console
          echo "$deploymentOutput"

          #* Format markdown code block and output to deployment.md
          sed \
            -e '1s/^/```diff\n/' \
            -e '$a```' -e 's/~/!/g' \
            -e 's/^[ \t]*//' \
            stdout.log > deployment.md

          #* Write as github output
          echo "deploymentOutput=$(echo $deploymentOutput)" >> "$GITHUB_OUTPUT"

    - name: Add info to the deployment file
      id: deployment-info
      if: inputs.what-if == 'true'
      shell: bash
      env:
        parameterFile: ${{ steps.resolve-deploymentconfig.outputs.parameter-file }}
        scope: ${{ steps.resolve-deploymentconfig.outputs.scope }}
      run: |
        deployment_name=$(echo $parameterFile | awk -F '/' '{print $(NF-1)}')
        echo "**Deployment Name: $deployment_name**" > commitMessageAndId.md
        echo "**Deployment Environment: $(basename $parameterFile | awk -F '.' '{print $(NF-1)}')**" >> commitMessageAndId.md
        echo "**Deployment Scope:** $scope" >> commitMessageAndId.md
        echo "**Commit ID:** $(git rev-parse HEAD)" >> commitMessageAndId.md
        echo "**Commit Message:** $(git log -1 --pretty=%B)" >> commitMessageAndId.md
        cat deployment.md >> commitMessageAndId.md
        mv commitMessageAndId.md deployment.md

    - name: PR comment for what-if deployment
      id: deployment-comment
      if: inputs.what-if == 'true'
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ steps.resolve-deploymentconfig.outputs.parameter-file }}
        message-path: |
          deployment.md

outputs:
  deployment-output:
    description: JSON formatted output from the deployment command.
    value: ${{ steps.bicep-deployment.outputs.deploymentOutput }}
